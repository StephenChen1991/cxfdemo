
package live.chenchen.cxf2;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.xml.namespace.QName;
import javax.xml.ws.Binding;
import javax.xml.ws.BindingProvider;
import javax.xml.ws.soap.SOAPBinding;

/**
 * This class was generated by Apache CXF 2.3.3
 * 2017-05-03T11:02:53.007+08:00
 * Generated source version: 2.3.3
 * 
 */
public final class MyServicePortType_MyServiceSoap_Client {

    private static final QName SERVICE_NAME = new QName("http://cxf2.chenchen.live/", "MyService");

    private MyServicePortType_MyServiceSoap_Client() {
    }

    public static void main(String args[]) throws Exception {
        URL wsdlURL = MyService.WSDL_LOCATION;
        if (args.length > 0) { 
            File wsdlFile = new File(args[0]);
            try {
                if (wsdlFile.exists()) {
                    wsdlURL = wsdlFile.toURI().toURL();
                } else {
                    wsdlURL = new URL(args[0]);
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
        }
      
        MyService ss = new MyService(wsdlURL, SERVICE_NAME);
        MyServicePortType port = ss.getMyServiceSoap();  
        
		Binding binding = ((BindingProvider)port).getBinding();

		((SOAPBinding)binding).setMTOMEnabled(true);
		
		// System.out.println(port.getClass().getInterfaces()[0].getName() +
		// ", " + port.getClass().getInterfaces()[1].getName());
		// System.out.println(port instanceof BindingProvider);
		
		DataSource dataSource = new FileDataSource(new File(
				"E:/Web Service/3/code/jakarta-jmeter-2.4.zip"));
		
		AttachmentType attachmentType = new AttachmentType();
		attachmentType.setContent(new DataHandler(dataSource));
				
		live.chenchen.cxf2.ArrayOfPersonType result = port.getPersonById(attachmentType);
		
        List<PersonType> list = result.getPersons();
        
        list.stream().forEach(person -> {
        	System.out.println(person.getName());
        	System.out.println(person.getAddress());
        	System.out.println(person.getBirthday());
        });
        System.exit(0);
    }

}
